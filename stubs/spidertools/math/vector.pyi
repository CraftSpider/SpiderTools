
from typing import Union, List, Dict, Any, TypeVar
import numbers

_T = TypeVar("_T")
_U = TypeVar("_U")
ValidVector = Union['Vector', numbers.Real]

def _getdef(list: List[_T], num: int, default: _U) -> Union[_T, _U]: ...

def _narrow(list: List[_T], l: int) -> List[_T]: ...

class Vector:

    __slots__ = ("dimensions", "_vals")

    _registry: Dict[str, type] = ...
    _numeric: Dict[int, type] = ...

    dimensions: int
    _vals: List[numbers.Real]

    def __new__(cls, *args: numbers.Real) -> Union['Vector', 'Vector3']: ...

    def __init__(self, *args: numbers.Real) -> None: ...

    def __repr__(self) -> str: ...

    def __eq__(self, other: 'Vector') -> bool: ...

    def __init_subclass__(cls, *args: Any, **kwargs: Any) -> None: ...

    def __add__(self, other: ValidVector) -> 'Vector': ...

    def __sub__(self, other: ValidVector) -> 'Vector': ...

    def __mul__(self, other: ValidVector) -> 'Vector': ...

    def __truediv__(self, other: ValidVector) -> 'Vector': ...

    def __floordiv__(self, other: ValidVector) -> 'Vector': ...

    def __mod__(self, other: ValidVector) -> 'Vector': ...

    def __pow__(self, other: float, modulo: int = ...) -> 'Vector': ...

    def __or__(self, other: 'Vector') -> 'Vector': ...

    def __rmul__(self, other: ValidVector) -> 'Vector': ...

    def __neg__(self) -> 'Vector': ...

    def __pos__(self) -> 'Vector': ...

    def __abs__(self) -> float: ...

    def __invert__(self) -> 'Vector': ...

    def __round__(self, n: int = ...) -> 'Vector': ...

    def __trunc__(self) -> 'Vector': ...

    def __floor__(self) -> 'Vector': ...

    def __ceil__(self) -> 'Vector': ...

    @property
    def x(self) -> numbers.Real: ...

    @x.setter
    def x(self, val: numbers.Real) -> None: ...

    @property
    def y(self) -> numbers.Real: ...

    @y.setter
    def y(self, val: numbers.Real) -> None: ...

    @property
    def z(self) -> numbers.Real: ...

    @z.setter
    def z(self, val: numbers.Real) -> None: ...

    def dot(self, other: 'Vector') -> float: ...

    def magnitude(self) -> float: ...

    def normal(self) -> 'Vector': ...

    def to_dim(self, d: int) -> 'Vector': ...

class Vector3(Vector):

    def __matmul__(self, other: 'Vector3') -> 'Vector3': ...

    def cross(self, other: 'Vector3') -> 'Vector3': ...

def rect_list(top_left: Vector3, bottom_right: Vector3) -> List[Vector3]: ...
