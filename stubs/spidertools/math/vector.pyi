
from typing import Union, List, Type, NoReturn
import numbers

ValidVector2 = Union['Vector2', numbers.Real]
ValidVector = Union['Vector', numbers.Real]

class Vector2:

    __slots__ = ("x", "y")

    UNIT: 'Vector2' = ...
    ZERO: 'Vector2' = ...
    UNIT_X: 'Vector2' = ...
    UNIT_Y: 'Vector2' = ...

    x: numbers.Real
    y: numbers.Real

    def __init__(self, x: numbers.Real, y: numbers.Real = ...) -> None: ...

    def __repr__(self) -> str: ...

    def __int__(self) -> NoReturn: ...

    def __float__(self) -> float: ...

    def __eq__(self, other: 'Vector2') -> bool: ...

    def __add__(self, other: ValidVector2) -> 'Vector2': ...

    def __sub__(self, other: ValidVector2) -> 'Vector2': ...

    def __mul__(self, other: ValidVector2) -> 'Vector2': ...

    def __truediv__(self, other: ValidVector2) -> 'Vector2': ...

    def __floordiv__(self, other: ValidVector2) -> 'Vector2': ...

    def __neg__(self) -> 'Vector2': ...

    def __abs__(self) -> float: ...

    def __round__(self, n: int = ...) -> 'Vector2': ...

    def __trunc__(self) -> 'Vector2': ...

    def __floor__(self) -> 'Vector2': ...

    def __ceil__(self) -> 'Vector2': ...

    def flatten(self) -> float: ...

    def to_3d(self) -> 'Vector3': ...

class Vector3:

    __slots__ = ("x", "y", "z")

    UNIT: 'Vector3' = ...
    ZERO: 'Vector3' = ...
    UNIT_X: 'Vector3' = ...
    UNIT_Y: 'Vector3' = ...
    UNIT_Z: 'Vector3' = ...

    x: numbers.Real
    y: numbers.Real
    z: numbers.Real

    def __init__(self, x: numbers.Real, y: numbers.Real = ..., z: numbers.Real = ...) -> None: ...

    def __repr__(self) -> str: ...

    def __int__(self) -> NoReturn: ...

    def __float__(self) -> float: ...

    def __eq__(self, other: 'Vector3') -> bool: ...

    def __add__(self, other: ValidVector) -> 'Vector3': ...

    def __sub__(self, other: ValidVector) -> 'Vector3': ...

    def __mul__(self, other: ValidVector) -> 'Vector3': ...

    def __rmul__(self, other: ValidVector) -> 'Vector3': ...

    def __matmul__(self, other: 'Vector3') -> 'Vector3': ...

    def __truediv__(self, other: ValidVector) -> 'Vector3': ...

    def __floordiv__(self, other: ValidVector) -> 'Vector3': ...

    def __or__(self, other: 'Vector3') -> float: ...

    def __neg__(self) -> 'Vector3': ...

    def __abs__(self) -> float: ...

    def __round__(self, n: int = ...) -> 'Vector3': ...

    def __trunc__(self) -> 'Vector3': ...

    def __floor__(self) -> 'Vector3': ...

    def __ceil__(self) -> 'Vector3': ...

    def flatten(self) -> float: ...

    def normal(self) -> 'Vector3': ...

    def dot(self, other: 'Vector3') -> float: ...

    def cross(self, other: 'Vector3') -> 'Vector3': ...

    def to_2d(self) -> Vector2: ...

Vector: Type[Vector3] = Vector3

def rect_list(top_left: Vector, bottom_right: Vector) -> List[Vector]: ...

UNIT_X: Vector
UNIT_Y: Vector
UNIT_Z: Vector
